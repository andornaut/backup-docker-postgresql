#!/bin/bash
set -e

usage() {
    echo "$(basename $0) [--drop] [--kill] [--help] host container [backup_file]" >&2
    exit 1
}

OPTS=`getopt -o dkh --long drop,kill,help -n $(basename $0) -- "$@"`

[[ $? -eq 0 ]] || usage
eval set -- "$OPTS"
drop_databases=false
kill_connections=false

while true; do
  case "$1" in
    -d | --drop ) drop_databases=true; shift ;;
    -k | --kill ) kill_connections=true; shift ;;
    -h | --help ) usage; shift ;;
    -- ) shift; break ;;
    * ) break ;;
  esac
done

[[ $# == 2 ]] || [[ $# == 3 ]] || usage

host=${1}
container=${2}
[[ $# == 3 ]] && [[ -f "${3}" ]] && backup_file="${3}" || backup_file="/dev/stdin"

ssh_command="ssh ${host} -C"
docker_command="sudo docker exec -i ${container}"
psql_command="psql -U postgres postgres"
drop_commands=$(${ssh_command} "${docker_command} ${psql_command} --tuples-only -c \"SELECT 'drop database '||datname||';'FROM pg_database WHERE datistemplate=false and datname != 'postgres';\"" </dev/null)

if ${kill_connections}; then
    ${ssh_command} "${docker_command} ${psql_command} --quiet -c \"SELECT pg_terminate_backend(pg_stat_activity.pid) FROM pg_stat_activity WHERE pid <> pg_backend_pid();\"" >/dev/null 2>&1 </dev/null
fi

if ${drop_databases}; then
    while IFS=';' read -ra drop_commands_array; do
        for drop_command in "${drop_commands_array[@]}"; do
            ${ssh_command} "${docker_command} ${psql_command} --quiet -c \"${drop_command}\"" </dev/null
        done
    done <<< "${drop_commands}"
fi

cat ${backup_file} | ${ssh_command} "gunzip -c - | ${docker_command} ${psql_command}"

